#' @param label.offset a numeric giving the space between the nodes and the
#'   tips of the phylogeny and their corresponding labels.
#' @param underscore a logical specifying whether the underscores in tip labels
#'   should be written as spaces (the default) or left as they are (if TRUE).
#' @param direction a character string specifying the direction of the tree.
#'   Four values are possible: "rightwards" (the default),
#'   "leftwards", "upwards", and "downwards".
#' @param plot a logical controlling whether to draw the tree. If FALSE, the
#'   graphical device is set as if the tree was plotted, and the coordinates
#'   are saved as well.
#' @param node.depth an integer value (1 or 2) used if edge lengths are not
#'   used to plot the tree; 1: the node depths are proportional to the number
#'   of tips descending from each node (the default), 2: they are evenly
#'   spaced.
#' @param align.tip.label a logical value or an integer. If TRUE, the tips are
#'   aligned and dotted lines are drawn between the tips of the tree and the
#'   labels. If an integer, the tips are aligned and this gives the type of the
#'   lines (lty).
#' @param x.lim a numeric vector of length one or two giving the limit(s) of
#'   the x-axis. If NULL, this is computed with respect to various parameters
#'   such as the string lengths of the labels and the branch lengths. If a
#'   single value is given, this is taken as the upper limit. Defaults to
#'   \code{NULL}.
#' @param y.lim same as above, but for the y-axis.
#' @param ... further arguments passed to \code{\link[ape]{plot.phylo}}.
#'
#' @details
#' This function plots a tree in 'rectangular phylogram' format, allowing to
#'   pass colour and line typevectors for the horizontal and vertical edges
#'   separately. The colour vector for horizontal edges is passed in the same
#'   order as the edges ('edge.color'), and the vector for the vertical edges
#'   in the same order as the internal node indices.
#'
#' Typically, one would first run \code{\link{get.rogue.placement}} on a tree
#'   and corresponding reference trees, then obtain edge formatting vectors
#'   from \code{\link{get.edge.formats}}, and finally pass those to the current
#'   function to generate the plot. Instead the wrapper function
#'   \code{\link{create.rogue.plot}} can be used.
#'
#' This function is based on the \code{\link[ape]{plot.phylo}} function in
#'   the \code{ape} package version 5.1 by E. Paradis.
#'
#' @return
#' \code{phylogramm.plot.twocoloured} returns invisibly a list with
#'    components whose values are those used for the current plot (see the
#'    help of \code{plot.phylo} for details).
#'
#' @references
#' Klopfstein, S., Spasojevic, T. (2018).
#'
#' @examples
#' ## general examples
#' tree <- ape::rtree(12, rooted = TRUE)
#' cols.horiz <- rep("black", length(tree$edge.length))
#' cols.verti <- rainbow(tree$Nnode)
#' phylogramm.plot.twocoloured(tree, edge.color = cols.horiz,
#'   vertical.edge.color = cols.verti)
#' cols.horiz <- rainbow(length(tree$edge.length))
#' cols.verti <- paste("grey", seq(from = 95, to = 20,
#'   by = -floor(75 / tree$Nnode)), sep = "")
#' phylogramm.plot.twocoloured(tree, edge.color = cols.horiz,
#'   vertical.edge.color = cols.verti)
#'
#' ## example of a Rogue Plot
#' reftrees <- ape::rmtree(5, 21, tip.label = c("rogue.taxon", paste("t",
#'   1:20, sep = "")))
#' reftrees <- c(rep(list(reftrees[[1]]), 60), rep(list(reftrees[[2]]),
#'   25), rep(list(reftrees[[3]]), 10), reftrees)
#' tree <- reftrees[[1]]
#' placements <- get.rogue.placement(tree, reftrees, rogues =
#'   "rogue.taxon", outgroup = "t1")
#' tree <- ape::drop.tip(tree, tip = "rogue.taxon")
#' edge.formats <- get.edge.formats(tree, placements, zero.col = "black",
#'   col = paste("grey", seq(from = 95, to = 20, by = -8), sep = ""),
#'   zero.lwd = 1, lwd = 3, min.prob = 0.01)
#' ff <- edge.formats[[1]]
#' phylogramm.plot.twocoloured(tree, edge.color = ff$cols.horizontal,
#'   vertical.edge.color = ff$cols.vertical, edge.lwd = ff$lwd.horizontal,
#'   vertical.edge.lwd = ff$lwd.vertical, tip.color = "black", edge.width = 2,
#'   no.margin = TRUE, cex = 0.8)
#'
#-------------------------------------------------------------------------------
#' @export
phylogramm.plot.twocoloured <- function (tree, edge.color = "black",
vertical.edge.color = "grey50", edge.lwd = 2, vertical.edge.lwd = 2,
use.edge.length = TRUE, show.tip.label = TRUE,
show.node.label = FALSE, tip.color = "black", edge.lty = 1,
font = 3, cex = par("cex"), adj = NULL, srt = 0, no.margin = FALSE,
root.edge = FALSE, label.offset = 0, underscore = FALSE,
direction = "rightwards",  plot = TRUE, node.depth = 1,
align.tip.label = FALSE, x.lim = NULL, y.lim = NULL, ...)
{
Ntip <- length(tree$tip.label)
if (Ntip < 2) {
stop("found less than 2 tips in the tree")
}
if (any(tabulate(tree$edge[, 1]) == 1))
stop("there are single (non-splitting) nodes in your tree; you may need
to use collapse.singles()")
.nodeHeight <- function (edge, Nedge, yy) .C(ape::node_height,
as.integer(edge[,1]), as.integer(edge[, 2]),
as.integer(Nedge), as.double(yy))[[4]]
.nodeDepth <- function (Ntip, Nnode, edge, Nedge, node.depth)
.C(ape::node_depth, as.integer(Ntip),
as.integer(edge[,1]), as.integer(edge[, 2]),
as.integer(Nedge), double(Ntip + Nnode),
as.integer(node.depth))[[5]]
.nodeDepthEdgelength <- function (Ntip, Nnode, edge, Nedge, edge.length)
.C(ape::node_depth_edgelength, as.integer(edge[, 1]),
as.integer(edge[, 2]), as.integer(Nedge),
as.double(edge.length), double(Ntip + Nnode))[[5]]
Nedge <- dim(tree$edge)[1]
Nnode <- tree$Nnode
if (any(tree$edge < 1) || any(tree$edge > Ntip + Nnode))
stop("tree badly conformed; cannot plot. Check the edge matrix.")
ROOT <- Ntip + 1
direction <- match.arg(direction, c("rightwards", "leftwards", "upwards",
"downwards"))
if (is.null(tree$edge.length))
use.edge.length <- FALSE
if (is.numeric(align.tip.label)) {
align.tip.label.lty <- align.tip.label
align.tip.label <- TRUE
} else {
if (align.tip.label)
align.tip.label.lty <- 3
}
if (align.tip.label) {
if (!use.edge.length || ape::is.ultrametric(tree))
align.tip.label <- FALSE
}
if (!use.edge.length || is.null(tree$root.edge) || !tree$root.edge)
root.edge <- FALSE
horizontal <- direction %in% c("rightwards", "leftwards")
xe <- tree$edge
phyOrder <- attr(tree, "order")
if (is.null(phyOrder) || phyOrder != "cladewise") {
tree <- ape::reorder.phylo(tree)
if (!identical(tree$edge, xe)) {
ereorder <- match(tree$edge[, 2], xe[, 2])
if (length(edge.color) > 1) {
edge.color <- rep(edge.color, length.out = Nedge)
edge.color <- edge.color[ereorder]
}
if (length(edge.lty) > 1) {
edge.lty <- rep(edge.lty, length.out = Nedge)
edge.lty <- edge.lty[ereorder]
}
if (length(edge.lwd) > 1) {
edge.lwd <- rep(edge.lwd, length.out = Nedge)
edge.lwd <- edge.lwd[ereorder]
}
}
}
yy <- numeric(Ntip + Nnode)
TIPS <- tree$edge[tree$edge[, 2] <= Ntip, 2]
yy[TIPS] <- 1:Ntip
z <- ape::reorder.phylo(tree, order = "postorder")
yy <- .nodeHeight(z$edge, Nedge, yy)
if (!use.edge.length) {
xx <- .nodeDepth(Ntip, Nnode, z$edge, Nedge, node.depth) - 1
xx <- max(xx) - xx
} else {
xx <- .nodeDepthEdgelength(Ntip, Nnode, z$edge, Nedge, z$edge.length)
}
if (!horizontal) {
tmp <- yy
yy <- xx
xx <- tmp - min(tmp) + 1
}
if (root.edge) {
if (direction == "rightwards")
xx <- xx + tree$root.edge
if (direction == "upwards")
yy <- yy + tree$root.edge
}
if (no.margin)
par(mai = rep(0, 4))
if (show.tip.label)
nchar.tip.label <- nchar(tree$tip.label)
max.yy <- max(yy)
if (is.null(x.lim)) {
if (horizontal) {
x.lim <- c(0, NA)
pin1 <- par("pin")[1]
strWi <- strwidth(tree$tip.label, "inches", cex = cex)
xx.tips <- xx[1:Ntip] * 1.04
alp <- try(uniroot(function (a) max(a * xx.tips + strWi) - pin1,
c(0, 1e+06))$root, silent = TRUE)
if (is.character(alp)) {
tmp <- max(xx.tips)
if (show.tip.label)
tmp <- tmp * 1.5
} else {
tmp <- if (show.tip.label)
max(xx.tips + strWi/alp)
else max(xx.tips)
}
if (show.tip.label)
tmp <- tmp + label.offset
x.lim[2] <- tmp
} else x.lim <- c(1, Ntip)
} else if (length(x.lim) == 1) {
x.lim <- c(0, x.lim)
if (!horizontal)
x.lim[1] <- 1
else -1
}
if (direction == "leftwards")
xx <- x.lim[2] - xx
if (is.null(y.lim)) {
if (horizontal) {
y.lim <- c(1, Ntip)
} else {
y.lim <- c(0, NA)
pin2 <- par("pin")[2]
strWi <- strwidth(tree$tip.label, "inches", cex = cex)
yy.tips <- yy[1:Ntip] * 1.04
alp <- try(uniroot(function (a) max(a * yy.tips + strWi) - pin2,
c(0, 1e+06))$root, silent = TRUE)
if (is.character(alp)) {
tmp <- max(yy.tips)
if (show.tip.label)
tmp <- tmp * 1.5
}
else {
tmp <- if (show.tip.label)
max(yy.tips + strWi/alp)
else max(yy.tips)
}
if (show.tip.label)
tmp <- tmp + label.offset
y.lim[2] <- tmp
}
} else if (length(y.lim) == 1) {
y.lim <- c(0, y.lim)
if (horizontal)
y.lim[1] <- 1
else -1
}
if (direction == "downwards")
yy <- y.lim[2] - yy
if (root.edge) {
if (direction == "leftwards")
x.lim[2] <- x.lim[2] + tree$root.edge
if (direction == "downwards")
y.lim[2] <- y.lim[2] + tree$root.edge
}
asp <- NA
plot.default(0, type = "n", xlim = x.lim, ylim = y.lim, xlab = "",
ylab = "", axes = FALSE, asp = asp, ...)
if (plot) {
if (is.null(adj)) {
adj <- if (direction == "leftwards") {
1
} else 0
}
if (show.tip.label) {
MAXSTRING <- max(strwidth(tree$tip.label, cex = cex))
loy <- 0
if (direction == "rightwards") {
lox <- label.offset + MAXSTRING * 1.05 * adj
}
if (direction == "leftwards") {
lox <- -label.offset - MAXSTRING * 1.05 * (1 - adj)
}
if (!horizontal) {
psr <- par("usr")
MAXSTRING <- MAXSTRING * 1.09 * (psr[4] - psr[3])/(psr[2] - psr[1])
loy <- label.offset + MAXSTRING * 1.05 * adj
lox <- 0
srt <- 90 + srt
if (direction == "downwards") {
loy <- -loy
srt <- 180 + srt
}
}
}
nodes <- (Ntip + 1):(Ntip + Nnode)
if (!horizontal) {
tmp <- yy
yy <- xx
xx <- tmp
}
x0v <- xx[nodes]
y0v <- y1v <- numeric(Nnode)
for (i in 1:Nnode) {
descs <- tree$edge[,2][which(tree$edge[, 1] == i + Ntip)]
tmp <- range(yy[descs])
y0v[i] <- tmp[1]
y1v[i] <- tmp[2]
}
x0h <- xx[tree$edge[, 1]]
x1h <- xx[tree$edge[, 2]]
y0h <- yy[tree$edge[, 2]]
#format of horizontal branches
Nedge <- dim(tree$edge)[1]
edge.color <- rep(edge.color, length.out = Nedge)
edge.lty <- rep(edge.lty, length.out = Nedge)
edge.lwd <- rep(edge.lwd, length.out = Nedge)
#format of vertical branches
if (length(vertical.edge.lwd) == Nnode ){
lwd.v <- vertical.edge.lwd
} else {
lwd.v <- rep(vertical.edge.lwd, length.out = Nnode)
}
if (length(vertical.edge.color) == Nnode ){
color.v <- vertical.edge.color
} else {
color.v <- rep(vertical.edge.color, length.out = Nnode)
}
if (horizontal) {
segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.lwd,
lty = edge.lty)
segments(x0v, y0v, x0v, y1v, col = color.v, lwd = lwd.v, lty = edge.lty)
} else {
segments(y0h, x0h, y0h, x1h, col = edge.color, lwd = edge.lwd,
lty = edge.lty)
segments(y0v, x0v, y1v, x0v, col = color.v, lwd = lwd.v, lty = edge.lty)
}
if (root.edge) {
rootcol <- if (length(edge.color) == 1) {
edge.color
} else "black"
switch(direction, rightwards = segments(0, yy[ROOT], tree$root.edge,
yy[ROOT], col = rootcol),
leftwards = segments(xx[ROOT], yy[ROOT],
xx[ROOT] + tree$root.edge, yy[ROOT],
col = rootcol),
upwards = segments(xx[ROOT], 0, xx[ROOT], tree$root.edge,
col = rootcol),
downwards = segments(xx[ROOT], yy[ROOT], xx[ROOT],
yy[ROOT] + tree$root.edge, col = rootcol))
}
if (show.tip.label) {
if (is.expression(tree$tip.label))
underscore <- TRUE
if (!underscore)
tree$tip.label <- gsub("_", " ", tree$tip.label)
if (align.tip.label) {
xx.tmp <- switch(direction, rightwards = max(xx[1:Ntip]),
leftwards = min(xx[1:Ntip]),
upwards = xx[1:Ntip], downwards = xx[1:Ntip])
yy.tmp <- switch(direction, rightwards = yy[1:Ntip],
leftwards = yy[1:Ntip], upwards = max(yy[1:Ntip]),
downwards = min(yy[1:Ntip]))
segments(xx[1:Ntip], yy[1:Ntip], xx.tmp, yy.tmp,
lty = align.tip.label.lty)
}
else {
xx.tmp <- xx[1:Ntip]
yy.tmp <- yy[1:Ntip]
}
text(xx.tmp + lox, yy.tmp + loy, tree$tip.label, adj = adj, font = font, srt = srt, cex = cex, col = tip.color)
}
if (show.node.label)
text(xx[ROOT:length(xx)] + label.offset, yy[ROOT:length(yy)],
tree$node.label, adj = adj, font = font, srt = srt,
cex = cex)
}
L <- list(type = "phylogram", use.edge.length = use.edge.length,
node.pos = 1, node.depth = node.depth,
show.tip.label = show.tip.label,
show.node.label = show.node.label, font = font, cex = cex,
adj = adj, srt = srt, no.margin = no.margin,
label.offset = label.offset, x.lim = x.lim, y.lim = y.lim,
direction = direction, tip.color = tip.color, Ntip = Ntip,
Nnode = Nnode, root.time = tree$root.time,
align.tip.label = align.tip.label)
#assign("last_plot.phylo", c(L, list(edge = xe, xx = xx, yy = yy)),
#      envir = .PlotPhyloEnv)
invisible(L)
}
#-------------------------------------------------------------------------------
#' Create Scale for Probabilities
#'
#' This function plots a scale from zero to one next to a vertical colour code.
#'
#' @param col a vector of mode character giving the colours used to reflect
#'   probabilities. At least two colours have to be passed.
#' @param breaks (optional): the limits of the categories of the scale. If
#'   \code{breaks} are not provided, they are spaced equally from zero to one,
#'   in order to match the number of colours passed in \code{col}.
#' @param title a title for the scale. Pass \code{'""'} to suppress the title.
#' @param cex a numeric value giving the scaling factor of the axis labels
#'   (Character EXpansion). The default is to take the current value from the
#'   graphical parameters. If printed, the title of the scale is chosen to be
#'   1.2x as large.
#'
#' @details
#' \code{prob.scale} prints a probability scale using the colour vector
#'   passed to it. The scale is not added to the current plot but printed
#'   separately. Use \code{\link{layout}} or similar to create subplot areas if
#'   intending to plot the scale next to a graph.
#'
#' @examples
#' ## example of an evenly spaced grey scale:
#' prob.scale(col = paste("grey", 10*(9:2), sep = ""), cex = 0.9)
#'
#' ## example of an evenly spaced rainbow scale:
#' prob.scale(col = rainbow(n = 8), cex = 0.9)
#'
#' ## example of an unevenly scale with user-defined breaks:
#' prob.scale(col = c("grey80", rainbow(n = 5, start = 0.35, end = 0.7)),
#'   breaks = c(0, 0.05, seq(from = 0.2, to = 1.0, by = 0.2)), cex = 0.9)
#-------------------------------------------------------------------------------
#' @export
prob.scale <- function (col, breaks, title = "probability", cex = par("cex")) {
if (missing(col)){
stop("Scale cannot be drawn unless a vector of colours of at least
length 2 is passed to the function. Exiting...")
}
if (length(col) < 2){
stop("Scale cannot be drawn unless a vector of colours of at least
length 2 is passed to the function. Exiting...")
}
if (!missing(breaks)){
if (length(breaks) != (length(col) +1)){
warning("There have to be exactly one more breaks than colours for
the scale. Using equally spaced breaks instead...")
breaks <- seq(0, 1, by = 1 / length(col))
}
} else {
breaks <- seq(0, 1, by = 1 / length(col))
}
col.rect <- vector(mode="list", length(col))
for (i in 1:length(col.rect)){
col.rect[[i]] <- c(i -1, i, i, i -1) / length(col)
}
ylim <- c(0, 1.1)
xlim <- c(0,1)
plot(1.1, 1.1, type = "n", ylim = ylim, xlim = xlim, xaxt = "n", yaxt = "n",
xlab = "", ylab = "", main = title, cex.main = cex * 1.2, bty = "n")
axis(4, at = seq(from = 0, to = 1, by = 1 / length(col)),
labels = sprintf("%.2f", breaks), tick = F, las = 1, cex.axis = cex)
for (i in 1:length(col.rect)){
polygon(c(0,0,1,1), col.rect[[i]], col=col[i], border=NA)
}
}
#-------------------------------------------------------------------------------
# internal
is.monophyletic <- function (tree, tips) {
if (length(tips) == 1){
return(T)
}
MRCA <- getMrca(tree, tips)
descs <- list.descendents(tree, MRCA)
if (length(tips) == length(descs)) {
return(T)
} else {
return(F)
}
}
#-------------------------------------------------------------------------------
# internal
list.descendents <- function (tree, nodeIndex, return.numeric = T){
descs = NULL
if (nodeIndex <= length(tree$tip.label) ){
descs <- c(descs, nodeIndex)
} else {
children <- tree$edge[which(tree$edge[, 1] == nodeIndex), 2]
for (i in 1:length(children)){
descs <- c(descs, list.descendents(tree, children[i]))
}
}
if (return.numeric) {
return(descs)
} else {
return(tree$tip.label[descs])
}
}
#-------------------------------------------------------------------------------
# internal
getMrca <- function (tree, tips){
if (length(tips) < 2){
stop("Error: at least two tips needed to calculate MRCA for. Exiting...")
}
ancestors <- rep(list(NULL), length(tips))
root.ind <- as.integer(tree$edge[, 1][!match(tree$edge[, 1], tree$edge[, 2], 0)][1])
for(i in 1:length(tips)){
index <- which(tree$tip.label == tips[i])
if (length(index) != 1){
stop(paste("Error: no tip corresponding to taxon '", tips[i], " found in tree. Exiting...", sep = ""))
}
while (index != root.ind){
index <- tree$edge[which(tree$edge[, 2] == index), 1]
ancestors[[i]] <- c(ancestors[[i]], index)
}
}
inters <- ancestors[[1]]
for( j in 2:length(ancestors)){
inters <- intersect(inters, ancestors[[j]])
}
return(inters[1])
}
#-------------------------------------------------------------------------------
#internal
check.alignment.format <- function(alignment, function.name = "function"){
if (is.list(alignment)){
align.mat <- matrix(nrow = length(alignment), ncol = length(alignment[[1]]), dimnames = list(names(alignment), NULL))
for (a in 1:length(alignment)){
align.mat[a, ] <- alignment[[a]]
}
} else if (is.matrix(alignment)){
align.mat <- alignment
} else {
stop(paste("Error in '", function.name, "': alignment not passed in right format - has to be a list or matrix. Exiting...", sep = ""))
}
return(align.mat)
}
#-------------------------------------------------------------------------------
library(ape)
